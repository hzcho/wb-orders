services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.4.0'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    logging:
      driver: "none"

  kafka:
    image: 'confluentinc/cp-kafka:7.4.0'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    logging:
      driver: "none"
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "cub", "kafka-ready", "-b", "kafka:9092", "1", "20"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: 'confluentinc/cp-kafka:7.4.0'
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "cub kafka-ready -b kafka:9092 1 20 && kafka-topics --create --if-not-exists --topic save_operation --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1"]

  postgres:
    image: postgres
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=${PG_USERNAME}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DBNAME}   
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USERNAME} -d ${PG_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  order-service:
    build: ./order-service
    env_file:
      - ./order-service/.env.wb.example
    environment:
      - PG_USERNAME=${PG_USERNAME}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_PORT=5432
      - PG_HOST=postgres
      - PG_DBNAME=${PG_DBNAME}
      - CONSUMER_TOPICS=${CONSUMER_TOPICS}
      - CONSUMER_OFFSET=${CONSUMER_OFFSET}
      - CONSUMER_GROUP_ID=${CONSUMER_GROUP_ID}
      - CONSUMER_BROKERS=${CONSUMER_BROKERS}
      - SERVER_PORT=${SERVER_PORT}
      - SERVER_READ_TIME=${SERVER_READ_TIME}
      - SERVER_WRITE_TIME=${SERVER_WRITE_TIME}
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    depends_on:
      - postgres
      - kafka-setup
      - kafka

  producer:
    build: ./producer-simulator
    env_file:
      - ./producer-simulator/.env.producer.example
    environment:
      - PRODUCER_SERVERS=${PRODUCER_SERVERS}
      - PRODUCER_PROTOCOL=${PRODUCER_PROTOCOL}
      - PRODUCER_ACKS=${PRODUCER_ACKS}
      - SCHEDULAR_PERIOD=${SCHEDULAR_PERIOD}
    depends_on:
      postgres:
        condition: service_healthy
      kafka-setup:
        condition: service_started
      kafka:
        condition: service_started
